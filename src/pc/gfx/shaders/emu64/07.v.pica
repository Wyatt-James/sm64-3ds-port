; position, texture, color
; Example usage: text on file select screen, textured screen transitions

; ----- Uniforms -----
.fvec rsp_color_selection ; Enum { col1_rgb, col1_alpha, col2_rgb, col2_alpha }
.fvec emu64_const_1       ; { 0.0,   1.0,  -1.0,  1/255 }

; At least one const must be present in each DVLE thanks to a libctru (or c3d?) bug.
.constf dummy_const (0.0, 0.0, 0.0, 0.0)

; ----- Aliases -----
.alias ones           emu64_const_1.yyyy   ; Vector full of ones
.alias color_scale    emu64_const_1.wwww   ; Vector full of 1/255

; ----- Subroutine Registers -----
; These are intended purposes, but they may vary betwen subroutines.
.alias sub_scratch_1  r10 ; Subroutine scratch register
.alias sub_scratch_2  r11 ; Subroutine scratch register
.alias sub_param_1    r12 ; Subroutine input register
.alias sub_param_2    r13 ; Subroutine input register
.alias sub_param_3    r14 ; Subroutine input register
.alias sub_return_1   r15 ; Subroutine return register
.alias sub_return_2   r9  ; Subroutine return register

; ----- Inputs -----
.in inpos v0 ; xyz, plus garbage for w
.in intex v1 ; uv
.in inclr v2

; ----- Outputs -----
.out outpos position  ; xyzw
.out outtc0 texcoord0 ; texture unit 0
.out outtc1 texcoord1 ; texture unit 1
.out outclr color     ; rgba

.entry main_05
.proc main_05

projection:
    mov sub_param_1, inpos
    call matrix_projection
    mov outpos, sub_return_1
    mov r0, sub_return_2
texture:
    mov sub_param_1, intex
    call calculate_texcoords
    mov outtc0, sub_return_1
    mov outtc1, sub_return_1
color:

    ; Resolve color
    mov sub_param_1, rsp_color_selection.xy   ; input CC source
    mul sub_param_2, color_scale, inclr       ; input vertex color
    mov sub_param_3, r0                       ; input transformed position
    call cc_color_select
    mov outclr, sub_return_1

    ; We're finished
    end
.end
