; position, 2 colors rgba

; Uniforms
.fvec projection[4], modelView[4], gameProjection[4]

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.00392156862)

.alias  zeros       myconst.xxxx ; Vector full of zeros
.alias  ones        myconst.yyyy ; Vector full of ones
.alias  color_scale myconst.wwww ; Vector full of 1/255

; Inputs
.in inpos v0 ; xyz, plus garbage for w
.in inclr v1
.in inclr2 v2

; Outputs
.out outpos position  ; xyzw
.out outtc0 texcoord0 ; texture unit 0
.out outtc1 texcoord1 ; texture unit 1
.out outclr color     ; rgba

.proc main

setup:
    mov r0, inpos
model:
    ; r1 = modelView * inpos
    dphi r1.x, r0, modelView[0]
    dphi r1.y, r0, modelView[1]
    dphi r1.z, r0, modelView[2]
    dphi r1.w, r0, modelView[3]
game_projection:
    ; r0 = gameProjection * inpos
    dp4 r0.x, gameProjection[0], r1
    dp4 r0.y, gameProjection[1], r1
    dp4 r0.z, gameProjection[2], r1
    dp4 r0.w, gameProjection[3], r1
projection:
    ; outpos = projection * inpos
    dp4 outpos.x, projection[0], r0
    dp4 outpos.y, projection[1], r0
    dp4 outpos.z, projection[2], r0
    dp4 outpos.w, projection[3], r0
texture:
    ; outtex = intex
    mov outtc0, zeros
    mov outtc1, zeros
color:
    ; copy color, scaling it by 1/255
    mul outclr, color_scale, inclr2

    ; We're finished
    end
.end
